// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user           String      @id @default(uuid())
  username          String      @unique
  email             String      @unique
  password          String
  deleted_at        DateTime? 
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt                      

  Bookmark Bookmark[] @relation("user_has_bookmark")
  Review Review[] @relation("user_has_review")
}

model Genre {
  id_genre      String  @id @default(uuid())
  name          String

  comicGenre ComicGenre[] @relation("genre_in_comic")
}

model Comic {
  id_comic      String      @id @default(uuid())
  name          String      @unique
  synopsis      String?
  author        String?
  artist        String?
  status        ComicStatus @default(ON_GOING)
  poster        String
  rating        Int         @default(0)
  bookmarked    Int         @default(0)

  deleted_at    DateTime?
  updated_at    DateTime    @updatedAt
  created_at    DateTime    @default(now())

  bookmark      Bookmark[] @relation("comic_bookmark")
  review        Review[] @relation("comic_has_review")
  comicGenre ComicGenre[] @relation("comic_has_genre")
}

model ComicGenre {
  id_comic_genre      String    @id @default(uuid())
  id_comic            String
  id_genre            String

  comic               Comic @relation("comic_has_genre", fields: [id_comic], references: [id_comic])
  genre               Genre @relation("genre_in_comic", fields: [id_genre], references: [id_genre])
}

model Bookmark {
  id_bookmark  String    @id @default(uuid())
  id_user      String
  id_comic     String
  status       BookmarkStatus
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  deleted_at   DateTime?

  user        User    @relation("user_has_bookmark", references: [id_user], fields: [id_user])
  comic       Comic   @relation("comic_bookmark", references: [id_comic], fields: [id_comic])

  @@unique([id_user, id_comic])
}

model Review {
  id_review     String    @id @default(uuid())
  id_user       String
  id_comic      String
  rating        Int
  review_text   String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  user        User      @relation("user_has_review", references: [id_user], fields: [id_user])
  comic       Comic     @relation("comic_has_review", references: [id_comic], fields: [id_comic])
}

enum BookmarkStatus {
  COMPLETED
  READING
  DROPPED
  PLAN_TO_READ
}

enum ComicStatus {
  COMPLETED
  ON_GOING
}
